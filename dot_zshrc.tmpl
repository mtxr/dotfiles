export PATH="$HOME/.local/bin:$PATH"
export PATH="$GOPATH/bin:$PATH"
export PATH="$HOME/.bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/sbin:$PATH"
export PATH=$GEM_HOME/bin:$PATH
export GPG_TTY=$(tty)
{{- if .install.node }}
export PATH="$HOME/.bun/bin:$PATH"
{{- end }}

if command -v gcloud &>/dev/null; then
  GCLOUD_BIN=$(dirname $(realpath $(which gcloud)))
  export PATH=$GCLOUD_BIN:$PATH
fi

{{ if eq .chezmoi.os "darwin" }}
if [ -d /opt/homebrew ]; then
  export HOMEBREW_PREFIX="/opt/homebrew"
elif [ -d /usr/local/homebrew ]; then
  export HOMEBREW_PREFIX="/usr/local/homebrew"
fi
{{ end }}
{{ if eq .chezmoi.os "linux" }}
if [ -d /home/linuxbrew/.linuxbrew ]; then
  export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
elif [ -d $HOME/.linuxbrew ]; then
  export HOMEBREW_PREFIX="$HOME/.linuxbrew"
fi
{{ end }}

eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
eval "$(mise activate zsh --shims)"
eval "$(mise activate zsh)"

export PKG_CONFIG_PATH="$HOMEBREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
{{- if eq .chezmoi.os "linux" }}
export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
{{- end }}
{{- if .install.android }}
export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH
{{- end }}

{{- if .install.rust }}
if [ -f $HOME/.cargo/env ]; then
  source "$HOME/.cargo/env"
fi
{{- end }}

typeset -U path

# Aliases
. $HOME/.zsh/aliases.zsh

# Functions
. $HOME/.zsh/functions.zsh


{{- if eq .chezmoi.os "linux" }}
if type gnome-keyring-daemon &> /dev/null; then
  dbus-update-activation-environment --systemd DISPLAY
  eval $(gnome-keyring-daemon --start --components=pkcs11,secrets,ssh,gpg 2> /dev/null)
  export GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO SSH_AUTH_SOCK
fi
{{- end }}

# Bootstrap
. $HOME/.zsh/bootstrap.zsh

{{ if eq .chezmoi.os "darwin" }}
[ -f "${HOME}/.iterm2_shell_integration.zsh" ] && . "${HOME}/.iterm2_shell_integration.zsh"
{{ end }}

# External plugins (initialized after)
. $HOME/.zsh/plugins_after.zsh

# Allow local customizations loading ~/.zsh-load folder
if [ -d "$HOME/.zsh-load" ];then
  for TO_LOAD in $HOME/.zsh-load/*
  do
    . $TO_LOAD
  done
  unset TO_LOAD
fi

# Need a tweak in arch for home and end keys to work properly
# (as well as insert, delete, pageup, pagedown, perhaps others...)
# https://wiki.archlinux.org/index.php/Home_and_End_keys_not_working#Zsh
bindkey "^[[2~" overwrite-mode # Ins
bindkey "^[[3~" delete-char # Del

# but.... home and end key escape sequences
# are DIFFERENT depending on whether I'm in a tmux session or not!
# To determine if tmux is running, examine values of $TERM and $TMUX.
if [[ "$TERM" =~ "screen" ]] && [ -n "$TMUX" ]; then
  bindkey "^[[1~" beginning-of-line
  bindkey "^[[4~" end-of-line
else
  # Assign these keys if tmux is NOT being used:
  bindkey "^[[H" beginning-of-line
  bindkey "^[[F" end-of-line
fi

if command -v fzf &> /dev/null; then
  [ ! -d $HOME/.autoload-zsh ] && mkdir -p $HOME/.autoload-zsh
  if [ ! -f "$HOME/.autoload-zsh/_fzf_compgen_path" ]; then
    echo "#! /usr/bin/env zsh" > $HOME/.autoload-zsh/_fzf_compgen_path
    declare -f _fzf_compgen_path >> $HOME/.autoload-zsh/_fzf_compgen_path
  fi

  if [ ! -f "$HOME/.autoload-zsh/_fzf_compgen_dir" ]; then
    echo "#! /usr/bin/env zsh" > $HOME/.autoload-zsh/_fzf_compgen_dir
    declare -f _fzf_compgen_dir >> $HOME/.autoload-zsh/.
  fi
fi

eval "$(starship init zsh)"

command -v dircolors &>/dev/null && eval `dircolors ~/.dircolors/theme`
command -v gdircolors &>/dev/null && eval `gdircolors ~/.dircolors/theme`

{{- if and (eq .chezmoi.os "darwin") (.preferences.onepasswordEnabled) }}
if [ -d ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t ]; then
  export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
fi
{{- end }}
if [ -z "$SSH_AUTH_SOCK" ]; then
  type ssh-agent &> /dev/null && eval $(ssh-agent) &> /dev/null
fi

printf '\eP$f{"hook": "SourcedRcFileForWarp", "value": { "shell": "zsh"}}\x9c'
