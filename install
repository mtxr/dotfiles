#!/bin/sh

# POSIX-compliant shell script for portability
set -e  # Exit on error

# Detect shell and set color codes
if [ -t 1 ] && [ -z "${NO_COLOR-}" ]; then
  # Only set colors if output is a terminal and NO_COLOR is not set
  case $TERM in
    xterm*|rxvt*)
      RED=$(printf '\033[0;31m')
      GREEN=$(printf '\033[0;32m')
      YELLOW=$(printf '\033[0;33m')
      NC=$(printf '\033[0m')
      ;;
    *)
      if command -v tput >/dev/null 2>&1; then
        RED=$(tput setaf 1)
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        NC=$(tput sgr0) # No Color
      fi
      ;;
  esac
else
  # No colors for non-terminal or when NO_COLOR is set
  RED='' GREEN='' YELLOW='' NC=''
fi

# Detect OS and package manager
detect_os() {
  if [ -f /etc/os-release ]; then
    # shellcheck disable=SC1091
    . /etc/os-release
    OS=$ID
  elif command -v uname >/dev/null 2>&1; then
    OS=$(uname -s)
  else
    OS="unknown"
  fi

  # Convert to lowercase in POSIX-compliant way
  OS=$(echo "$OS" | tr '[:upper:]' '[:lower:]')
  echo "$OS"
}

# Simple logging functions
info() {
  if [ -n "$GREEN" ]; then
    printf "%s[INFO]%s %s\n" "${GREEN}" "${NC}" "$1"
  else
    printf "[INFO] %s\n" "$1"
  fi
}

warn() {
  if [ -n "$YELLOW" ]; then
    printf "%s[WARN]%s %s\n" "${YELLOW}" "${NC}" "$1" >&2
  else
    printf "[WARN] %s\n" "$1" >&2
  fi
}

error() {
  if [ -n "$RED" ]; then
    printf "%s[ERROR]%s %s\n" "${RED}" "${NC}" "$1" >&2
  else
    printf "[ERROR] %s\n" "$1" >&2
  fi
  exit 1
}

# Install dependencies for different OSes
install_dependencies() {
  os=$1

  case $os in
    alpine)
      if ! command -v curl >/dev/null 2>&1; then
        warn "Installing curl..."
        apk add --no-cache curl || error "Failed to install curl"
      fi
      if ! command -v git >/dev/null 2>&1; then
        warn "Installing git..."
        apk add --no-cache git || error "Failed to install git"
      fi
      if ! command -v zsh >/dev/null 2>&1; then
        warn "Installing zsh..."
        apk add --no-cache zsh || error "Failed to install zsh"
      fi
      ;;
    ubuntu|debian|linuxmint|pop|raspbian)
      if ! command -v curl >/dev/null 2>&1 || ! command -v git >/dev/null 2>&1 || ! command -v zsh >/dev/null 2>&1; then
        warn "Updating package lists..."
        if [ "$(id -u)" -eq 0 ]; then
          apt-get update -qq || warn "Package list update failed, continuing anyway..."
        else
          sudo apt-get update -qq || warn "Package list update failed, continuing anyway..."
        fi
      fi
      if ! command -v curl >/dev/null 2>&1; then
        warn "Installing curl..."
        if [ "$(id -u)" -eq 0 ]; then
          apt-get install -y curl || error "Failed to install curl"
        else
          sudo apt-get install -y curl || error "Failed to install curl"
        fi
      fi
      if ! command -v git >/dev/null 2>&1; then
        warn "Installing git..."
        if [ "$(id -u)" -eq 0 ]; then
          apt-get install -y git || error "Failed to install git"
        else
          sudo apt-get install -y git || error "Failed to install git"
        fi
      fi
      if ! command -v zsh >/dev/null 2>&1; then
        warn "Installing zsh..."
        if [ "$(id -u)" -eq 0 ]; then
          apt-get install -y zsh || error "Failed to install zsh"
        else
          sudo apt-get install -y zsh || error "Failed to install zsh"
        fi
      fi
      ;;
    *)
      if ! command -v curl >/dev/null 2>&1 || ! command -v git >/dev/null 2>&1; then
        error "curl and git are required but not installed"
      fi
      if ! command -v zsh >/dev/null 2>&1; then
        warn "zsh is not installed. Some features may not work as expected."
      fi
      ;;
  esac

  # Verify installations
  command -v curl >/dev/null 2>&1 || error "curl is not available"
  command -v git >/dev/null 2>&1 || error "git is not available"
}

# Set zsh as default shell if it's not already
set_default_shell() {
  if [ "$DRY_RUN" -eq 1 ]; then
    info "[DRY RUN] Would set zsh as default shell"
    return 0
  fi

  # Check if zsh is installed
  if ! command -v zsh >/dev/null 2>&1; then
    warn "zsh is not installed, cannot set as default shell"
    return 1
  fi

  # Get zsh path
  ZSH_PATH=$(command -v zsh)

  # Check if zsh is already the default shell
  if [ "$(getent passwd "$USER" | cut -d: -f7)" = "$ZSH_PATH" ]; then
    info "zsh is already the default shell"
    return 0
  fi

  # Different methods based on OS
  case $(uname -s) in
    Linux)
      # Check if zsh is in /etc/shells
      if ! grep -q "^$ZSH_PATH$" /etc/shells 2>/dev/null; then
        warn "Adding $ZSH_PATH to /etc/shells"
        if [ "$(id -u)" -eq 0 ]; then
          echo "$ZSH_PATH" >> /etc/shells
        else
          echo "$ZSH_PATH" | sudo tee -a /etc/shells >/dev/null
        fi
      fi

      # Change the default shell
      warn "Setting zsh as default shell for $USER"
      if [ "$(id -u)" -eq 0 ]; then
        chsh -s "$ZSH_PATH" "$USER" || sudo chsh -s "$ZSH_PATH" "$USER" || warn "Failed to change default shell"
      else
        sudo chsh -s "$ZSH_PATH" "$USER" || warn "Failed to change default shell"
      fi
      ;;
    Darwin)
      # On macOS, use dscl to change the shell
      warn "Setting zsh as default shell for $USER"
      if [ "$(id -u)" -eq 0 ]; then
        chsh -s "$ZSH_PATH" "$USER" || warn "Failed to change default shell"
      else
        sudo chsh -s "$ZSH_PATH" "$USER" || warn "Failed to change default shell"
      fi
      ;;
    *)
      warn "Unsupported OS for automatic shell change"
      return 1
      ;;
  esac

  info "Default shell changed to zsh. The change will take effect in new terminal sessions."
}

# Default values
REPO="mtxr/dotfiles"  # Make this configurable
SKIP_INSTALL=0
FORCE=0
DRY_RUN=0
OS=$(detect_os)

# Parse arguments
while [ $# -gt 0 ]; do
  case $1 in
    -s|--skip) SKIP_INSTALL=1 ;;
    -f|--force) FORCE=1 ;;
    -d|--dry-run) DRY_RUN=1 ;;
    *)
      echo "Unknown parameter: $1" >&2
      exit 1
      ;;
  esac
  shift
done

# Set up logging
LOG_FILE="$HOME/dotfiles_install_$(date +%Y%m%d_%H%M%S).log"

# Function to log to both terminal and file
log_message() {
  local level=$1
  local message=$2
  local timestamp

  timestamp=$(date +'%Y-%m-%d %H:%M:%S')

  # Always print to terminal
  case $level in
    INFO) printf "[%s] %-7s %s\n" "$timestamp" "$level" "$message" ;;
    WARN|ERROR) printf "[%s] %-7s %s\n" "$timestamp" "$level" "$message" >&2 ;;
  esac

  # Log to file if not in dry run
  if [ "$DRY_RUN" -eq 0 ] && [ -n "$LOG_FILE" ]; then
    printf "[%s] %-7s %s\n" "$timestamp" "$level" "$message" >> "$LOG_FILE"
  fi
}

# Update logging functions to use log_message
info() {
  if [ -n "$GREEN" ]; then
    log_message "INFO" "${GREEN}$1${NC}"
  else
    log_message "INFO" "$1"
  fi
}

warn() {
  if [ -n "$YELLOW" ]; then
    log_message "WARN" "${YELLOW}$1${NC}"
  else
    log_message "WARN" "$1"
  fi
}

error() {
  if [ -n "$RED" ]; then
    log_message "ERROR" "${RED}$1${NC}"
  else
    log_message "ERROR" "$1"
  fi
  exit 1
}

# Initialize logging
if [ "$DRY_RUN" -eq 0 ]; then
  info "Logging to $LOG_FILE"
  # Create log file if it doesn't exist
  : > "$LOG_FILE"
else
  info "DRY RUN MODE - No changes will be made"
fi

# Install required dependencies
install_dependencies "$OS"

# Install Homebrew if not installed (only on macOS)
if [ "$OS" = "darwin" ] && ! command -v brew >/dev/null 2>&1; then
  info "Installing Homebrew..."
  if [ "$DRY_RUN" -eq 0 ]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [ -f /opt/homebrew/bin/brew ]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    elif [ -f ~/.linuxbrew/bin/brew ]; then
      eval "$(~/.linuxbrew/bin/brew shellenv)"
    fi
  else
    echo "[DRY RUN] Would install Homebrew"
  fi
fi

# Install chezmoi if not installed
if ! command -v chezmoi >/dev/null 2>&1; then
  info "Installing chezmoi..."
  bin_dir="$HOME/.local/bin"

  if [ "$DRY_RUN" -eq 0 ]; then
    mkdir -p "$bin_dir"

    # Use the most reliable method available
    if command -v curl >/dev/null 2>&1; then
      sh -c "$(curl -fsLS https://git.io/chezmoi)" -- -b "$bin_dir" ||
        error "Failed to install chezmoi using curl"
    elif command -v wget >/dev/null 2>&1; then
      sh -c "$(wget -qO- https://git.io/chezmoi)" -- -b "$bin_dir" ||
        error "Failed to install chezmoi using wget"
    elif command -v fetch >/dev/null 2>&1; then
      sh -c "$(fetch -qo - https://git.io/chezmoi)" -- -b "$bin_dir" ||
        error "Failed to install chezmoi using fetch"
    else
      error "No supported download tool (curl/wget/fetch) found"
    fi

    # Add to PATH if not already there (POSIX-compliant way)
    case ":$PATH:" in
      *:"$bin_dir":*) ;;
      *)
        export PATH="$bin_dir:$PATH"
        # Also add to .profile for future sessions
        if [ -f "$HOME/.profile" ]; then
          if ! grep -q "$bin_dir" "$HOME/.profile"; then
            echo "# Add local bin to PATH" >> "$HOME/.profile"
            echo "export PATH=\"$bin_dir:\$PATH\"" >> "$HOME/.profile"
          fi
        fi
        ;;
    esac
  else
    info "[DRY RUN] Would install chezmoi to $bin_dir"
  fi

  # Verify installation
  if ! command -v chezmoi >/dev/null 2>&1 && [ "$DRY_RUN" -eq 0 ]; then
    error "chezmoi installation failed - check network connection and try again"
  fi
fi

# Check for existing dotfiles
if [ -d "$HOME/.local/share/chezmoi" ] && [ "$FORCE" -eq 0 ]; then
  warn "Dotfiles already initialized at ~/.local/share/chezmoi"
  read -r -p "Do you want to continue? [Y/n] " REPLY
  REPLY=${REPLY:-y}
  case "$REPLY" in
    [Yy]*)
      # Continue
      ;;
    [Nn]*)
      info "Installation aborted by user"
      exit 1
      ;;
    *)
      info "Invalid input, exiting"
      exit 1
      ;;
  esac
fi

# Initialize and apply dotfiles
if [ "$SKIP_INSTALL" -eq 1 ]; then
  info "Initializing dotfiles (skipping installation)..."
  if [ "$DRY_RUN" -eq 0 ]; then
    if ! chezmoi init --apply "$REPO"; then
      error "Failed to initialize dotfiles"
    fi
  else
    info "[DRY RUN] Would run: chezmoi init --apply $REPO"
  fi
else
  info "Initializing and applying dotfiles..."
  if [ "$DRY_RUN" -eq 0 ]; then
    if ! chezmoi init --apply "$REPO"; then
      error "Failed to initialize and apply dotfiles"
    fi
  else
    info "[DRY RUN] Would run: chezmoi init --apply $REPO"
  fi
fi

# Verify installation
info "Verifying installation..."
if [ "$DRY_RUN" -eq 0 ] && command -v chezmoi >/dev/null 2>&1; then
  if ! chezmoi verify; then
    warn "Some verifications failed. Check $LOG_FILE for details"
  fi
fi

info "Dotfiles installation complete!"
info "Log file: $LOG_FILE"
